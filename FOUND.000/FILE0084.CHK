)
EndLocR1 = visual.PatchStim(winR, tex='None', units='pix', pos=[140,-420], size=(7,60), color=[-1,-1,-1], ori=340)

#Create fixation and fusion lock
#Dot
fixationL = visual.PatchStim(winL, texRes=512, tex='None', mask="circle",units='pix',rgb=-1, pos=[0,0], size=(40.0,40.0))
fixationR = visual.PatchStim(winR, texRes=512, tex='None', mask="circle",units='pix',rgb=-1, pos=[0,0], size=(40.0,40.0))

dotL = visual.PatchStim(winL, texRes=512, tex='None', mask="circle",units='pix',rgb=1, pos=[0,0], size=(20.0,20.0))
dotR = visual.PatchStim(winR, texRes=512, tex='None', mask="circle",units='pix',rgb=1, pos=[0,0], size=(20.0,20.0))

#Spokes
# to the right window    
BarTop = visual.PatchStim(winR, tex='none', units='pix', rgb=1.0, pos=(0,85),ori=0, size=(15,100))
BarLeft = visual.PatchStim(winR, tex='none', units='pix', rgb=1.0, pos=(-85,0),ori=0, size=(100,15))

# to the left window    
BarBottom = visual.PatchStim(winL, tex='none', units='pix', rgb=-1.0, pos=(-0,-85),ori=0, size=(15,100))
BarRight = visual.PatchStim(winL, tex='none', units='pix', rgb=-1.0, pos=(85,0),ori=0, size=(100,15))

#Fusion lock
LockSize=512
array = zeros([LockSize,LockSize])
for n in range(0, LockSize+1, 32):
    array[n:16+n,0:16]=1
    array[n-16:16+n-16,0:16]=-1
    array[n:16+n,LockSize-16:LockSize]=-1
    array[n-16:16+n-16,LockSize-16:LockSize]=1
    
    array[0:16,n:16+n]=1
    array[0:16, n-16:16+n-16]=-1
    array[LockSize-16:LockSize,n:16+n]=-1
    array[LockSize-16:LockSize, n-16:16+n-16]=1

fusionL = visual.PatchStim(winL, tex=array, 
    size=(1050,1050), units='pix',
    interpolate=False,
    autoLog=True)
fusionR = visual.PatchStim(winR, tex=array, 
    size=(1050,1050), units='pix',
    interpolate=False,
    autoLog=True) 

Fixation = [fixationL, fixationR, dotR, dotL, BarBottom, BarTop, BarLeft, BarRight, EndLocL1, EndLocL2, EndLocR1, EndLocR2]

# Break stimuli

BreakStimL = visual.RadialStim(winL,size=resY-350,angularCycles=0, color=1,angularRes=35,units="pix", radialCycles = 0, contrast = 1)
BreakStimR = visual.RadialStim(winR,size=resY-350,angularCycles=0, color=1,angularRes=35,units="pix", radialCycles = 0, contrast = 1)

#--------------------------------------
#                 Messages
#--------------------------------------

# Inscructions = 

# Check stimuli is fusing
FixationMsgL = visual.TextStim(winL, 'Please ensure stimuli is fusing. \nPress the Right arrow when the wave reaches the desitination point\nPress the Left arrow if the wave is not triggered\nPress any button to begin', pos=(0,250),  
    flipHoriz=True, height=40, wrapWidth=1000)
FixationMsgR = visual.TextStim(winR, 'Please ensure stimuli is fusing. \nPress the Right arrow when the wave reaches the desitination point\nPress the Left arrow if the wave is not triggered\nPress any button to begin', pos=(0,250),  
    flipHoriz=True, height=40, wrapWidth=1000)

#PauseMsgL = visual.TextStim(winL, 'Break in experiment \nPress any button to continue',  flipHoriz=True, height=40, wrapWidth=1000)
#PauseMsgR = visual.TextStim(winR, 'Break in experiment \nPress any button to continue',  flipHoriz=True, height=40, wrapWidth=1000)

EndMsgL = visual.TextStim(winL, 'Experiment Over \nThanks for Participating!',  flipHoriz=True, height=40, wrapWidth=1000)
EndMsgR = visual.TextStim(winR, 'Experiment Over \nThanks for Participating!',  flipHoriz=True, height=40, wrapWidth=1000)

#--------------------------------------
#           Presentation Loop
#--------------------------------------

#Check fusion
fusionL.draw()
fusionR.draw()
for x in Fixation:
    x.draw()
FixationMsgL.draw()
FixationMsgR.draw()
winL.flip()
winR.flip()
event.waitKeys()

# Initialise lists that will store output data
Direction = []
ResponseTime = []
StimOrientation = []
IsOddBall = []

BreakNum = 0
OddballRand = rand.randint(5, 7)
OddballTrack = 0

for y in Exp:
    # Create stimuli
    LeftEye, maskL, RightEye, maskR, Trigger = createRadialStim(winL, winR, resY, Condition=y)

    fusionL.draw()
    fusionR.draw()
    for x in Fixation:
        x.draw()
    winL.flip()
    winR.flip()
    time.sleep(2)

#    Flash suppression
    fusionL.draw()
    fusionR.draw()
    if y[-1] == "L":
        LeftEye.draw()
        maskL.draw()
    else:
        RightEye.draw()
        maskR.draw()
    for x in Fixation:
        x.draw()

    winL.flip()
    winR.flip()
    time.sleep(1)

#   Present stimuli
    fusionL.draw()
    fusionR.draw()
    LeftEye.draw()
    maskL.draw()
    RightEye.draw()
    maskR.draw()
    for x in Fixation:
        x.draw()
    
    winL.flip()
    winR.flip()
    time.sleep(0.5)

#   Present trigger
    fusionL.draw()
    fusionR.draw()
    LeftEye.draw()
    RightEye.draw()
    Trigger.draw()
    maskL.draw()
    maskR.draw()
    
    for x in Fixation:
        x.draw()

    Clock.reset() # Start timing
    
    winL.flip()
    winR.flip()
    time.sleep(0.25)

# Remove Trigger and wait for response
    fusionL.draw()
    fusionR.draw()
    LeftEye.draw()
    maskL.draw()
    RightEye.draw()
    maskR.draw()

    for x in Fixation:
        x.draw()
    winL.flip()
    winR.flip()

    Keys = event.waitKeys()

# Add data from trial
    RespTime = Clock.getTime()
    ResponseTime.append(RespTime)
    StimOrientation.append(y)
    Keys = Keys[0]
    Keys = Keys.strip("[']")
    Direction.append(Keys)
    IsOddBall.append("N")
    if Keys == "right":
        if y[0] == 'R':
            RadAvSpeed.append(RespTime)
        elif y[0] == 'S':
            SpirAvSpeed.append(RespTime)
        elif y[0] == 'C':
            ConcAvSpeed.append(RespTime)
#    Clear Screen
    for x in Fixation:
        x.draw()
    winL.flip()
    winR.flip()
    
    
    ######################################################################################
    
    
    OddballTrack += 1
#    OddBall
    if OddballTrack == OddballRand:
        OddBallCondNum = rand.randint(0, 5)
        OddBallCondition = ConditionList[OddBallCondNum]
        # Main stimuli
        LeftEye, maskL, RightEye, maskR, Trigger = createRadialStim(winL, winR, 
            resY, Condition=OddBallCondition)
            
        fusionL.draw()
        fusionR.draw()
        for x in Fixation:
            x.draw()
        winL.flip()
        winR.flip()
        time.sleep(2)
        
#    Flash suppression
        fusionL.draw()
        fusionR.draw()
        if OddBallCondition[-1] == "L":
            LeftEye.draw()
            maskL.draw()
        else:
            RightEye.draw()
            maskR.draw()
        for x in Fixation:
            x.draw()
    
        winL.flip()
        winR.flip()
        time.sleep(1)

#   Present stimuli, only rival stim shown
        fusionL.draw()
        fusionR.draw()
        if OddBallCondition[-1] == "R":
            LeftEye.draw()
            maskL.draw()
        else:
            RightEye.draw()
            maskR.draw()
            
        for x in Fixation:
            x.draw()
        
        winL.flip()
        winR.flip()
        time.sleep(0.5)

    #   Present trigger
        fusionL.draw()
        fusionR.draw()
        if OddBallCondition[-1] == "L":
            LeftEye.draw()
        else:
            RightEye.draw()
        Trigger.draw()
        maskL.draw()
        maskR.draw()
        for x in Fixation:
            x.draw()        
        winL.flip()
        winR.flip()
        time.sleep(0.25)

# Set wave speed based on average travel time in each condition
        if y[0] == 'R':
            WedgeSize = 180 * mean(RadAvSpeed)
        elif y[0] == 'S':
            WedgeSize = 180 * mean(SpirAvSpeed)
        elif y[0] == 'C':
            WedgeSize = 180 * mean(ConcAvSpeed)
        
        Clock.reset() # Start timing
        Keys = []
        while Keys == []:
            a = WedgeSize*Clock.getTime()
            b = 360 - WedgeSize*Clock.getTime()
            if OddBallCondition[-1] == "L":
            # Clockwise oddball
                Clockwise, maskL, Unneeded, maskR, Trigger = createRadialStim(winL, winR, 
                    resY, visWedge = (0,a), Condition=OddBallCondition)
            # Counter-clockwise oddball
                CounterClockwise, maskL, Unneeded, maskR, Trigger = createRadi